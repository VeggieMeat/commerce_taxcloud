<?php

/**
 * Implements hook_libraries_info().
 */
function commerce_taxcloud_libraries_info() {
  $libraries['php-taxcloud'] = array(
    'name' => 'PHP-TaxCloud',
    'vendor url' => 'https://github.com/VeggieMeat/php-taxcloud',
    'download url' => 'https://github.com/VeggieMeat/php-taxcloud/archive/master.tar.gz',
    'version' => 'dev',
    'files' => array(
      'php' => array(
        'lib/php-taxcloud.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_permission().
 */
function commerce_taxcloud_permission() {
  return array(
    'administer taxcloud settings' => array(
      'title' => t('Administer TaxCloud settings'),
      'description' => t('Access to edit TaxCloud account settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_taxcloud_menu() {
  $items['admin/commerce/config/taxes/taxcloud'] = array(
    'title' => 'TaxCloud Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_taxcloud_admin_form'),
    'access arguments' => array('administer taxcloud settings'),
    'file' => 'commerce_taxcloud.admin.inc',
    'type' => MENU_NORMAL_ITEM,
  );

  $items['admin/commerce/config/taxes/taxcloud/line-items'] = array(
    'title' => 'TaxCloud Line Item Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_taxcloud_admin_line_item_form'),
    'access arguments' => array('administer taxcloud settings'),
    'file' => 'commerce_taxcloud.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

function commerce_taxcloud_communication($customer_address, $products, $cartid) {
  if (!class_exists('\TaxCloud\Client')) {
    libraries_load('php-taxcloud');
  }

  $client = new \TaxCloud\Client();

  $destination = new \TaxCloud\Address();
  $destination->setAddress1($customer_address['thoroughfare']);

  if (isset($customer_address['premise'])) {
    $destination->setAddress2($customer_address['premise']);
  }

  $destination->setCity($customer_address['locality']);
  $destination->setState($customer_address['administrative_area']);

  $zip = explode('-', $customer_address['postal_code']);
  $destination->setZip5($zip[0]);
  if (isset($zip[1])) {
    $destination->setZip4($zip[1]);
  }

  $params = array(
    'uspsUserID' => variable_get('commerce_taxcloud_usps_id'),
    'address1' => $destination->getAddress1(),
    'address2' => $destination->getAddress2(),
    'city' => $destination->getCity(),
    'state' => $destination->getState(),
    'zip5' => $destination->getZip5(),
    'zip4' => $destination->getZip4(),
  );

  $VerifyAddress = new \TaxCloud\VerifyAddress(variable_get('commerce_taxcloud_usps_id', $destination));

  $verifiedAddress = $client->VerifyAddress($VerifyAddress);

  if ($verifiedAddress->VerifyAddressResult->ErrNumber == 0) {
    $destination->setAddress1($verifiedAddress->VerifyAddressResult->Address1);
    if (isset($verifiedAddress->VerifyAddressResult->Address2)) {
      $destination->setAddress2($verifiedAddress->VerifyAddressResult->Address2);
    }
    $destination->setCity($verifiedAddress->VerifyAddressResult->City);
    $destination->setState($verifiedAddress->VerifyAddressResult->State);
    $destination->setZip5($verifiedAddress->VerifyAddressResult->Zip5);
    $destination->setZip4($verifiedAddress->VerifyAddressResult->Zip4);
  }

  $origin = new \TaxCloud\Address(
    variable_get('commerce_taxcloud_address1'),
    variable_get('commerce_taxcloud_address2'),
    variable_get('commerce_taxcloud_city'),
    variable_get('commerce_taxcloud_state')
  );

  $zip = explode('-', variable_get('commerce_taxcloud_zip'));
  $origin->setZip5($zip[0]);
  $origin->setZip4($zip[1]);

  foreach ($products as $k => $product) {
    $cartItem = new CartItem();

    $cartItem->setItemID($product['productid']);
    $cartItem->setIndex($product['cart_item_index']);
    // @TODO Set TIC per product type
    $cartItem->setTIC(variable_get('commerce_taxcloud_tic_id', '00000'));
    $cartItem->setPrice($product['price']);
    $cartItem->setQty($product['qty']);

    $cartItems[$k] = $cartItem;
  }

  global $user;

  $lookup = new \TaxCloud\Lookup(
    variable_get('commerce_taxcloud_api_id'),
    variable_get('commerce_taxcloud_api_key'),
    $user->uid,
    $cartid,
    $cartItems,
    $origin,
    $destination
  );

  $lookupResponse = $client->Lookup($lookup);

  $taxes = array();
  $cart_items = $lookupResponse->LookupResult->CartItemsResponse->CartItemResponse;
  if (is_array($cart_items)) {
    foreach ($cart_items as $cart_item) {
      $taxes[$cart_item->CartItemIndex] = $cart_item->TaxAmount;
    }
  }
  elseif (is_object($cart_items)) {
    $taxes[$cart_items->CartItemIndex] = $cart_items->TaxAmount;
  }

  return $taxes;
}

function commerce_taxcloud_authorized_captured($cartid, $products, $orderid) {
  if (!class_exists('\TaxCloud\Client')) {
    libraries_load('php-taxcloud');
  }

  $client = new \TaxCloud\Client();

  foreach ($products as $k => $product) {
    $cartItem = new \TaxCloud\CartItem();

    $cartItem->setItemID($product['productid']);
    $cartItem->setIndex($product['cart_item_index']);
    // @TODO Set TIC per product type.
    $cartItem->setTIC(variable_get('commerce_taxcloud_tic_id', '00000'));
    $cartItem->setPrice($product['price']);
    $cartItem->setQty($product['qty']);

    $cartItems[$k] = $cartItem;
  }

  global $user;

  $authcap = new \TaxCloud\AuthorizedWithCapture(
    variable_get('commerce_taxcloud_api_id'),
    variable_get('commerce_taxcloud_api_key'),
    $user->uid,
    $cartid,
    $cartItems,
    $orderid,
    date("c"),
    date("c")
  );

  $authResponse = $client->AuthorizedWithCapture($authcap);
}

/**
 *  * Implements hook_commerce_tax_type_info().
 *   */
function commerce_taxcloud_commerce_tax_type_info() {
  $tax_types = array();

  $tax_types['taxcloud_sales_tax'] = array(
    'title' => t('TaxCloud Sales Tax'),
    'display_title' => t('Sales tax'),
    'description' => t('Sales tax calculated via TaxCloud API'),
    'admin_list' => TRUE,
  );

  return $tax_types;
}

/**
 * Implements hook_commerce_tax_rate_info().
 */
function commerce_taxcloud_commerce_tax_rate_info() {
  $tax_rates = array();

  $tax_rates['taxcloud_sales_tax'] = array(
    'title' => t('TaxCloud Sales Tax'),
    'display_title' => t('Sales tax'),
    'description' => t('Calculate sales tax via TaxCloud API'),
    'type' => 'taxcloud_sales_tax',
    'rate' => 0,
    'admin_list' => TRUE,
    'calculation_callback' => 'commerce_taxcloud_sales_tax_calculate',
    'price_component' => 'taxcloud_sales_tax',
  );

  return $tax_rates;
}

/**
 * Calculate applicable sales tax.
 *
 * @param array $tax_rate
 *   The tax rate array for the tax to calculate.
 * @param object $line_item_wrapper
 *   An entity_metadata_wrapper() for the line item whose unit price should be
 *   used in the tax calculation.
 *
 * @return array
 *   The tax price array or FALSE if the tax is already applied.
 */
function commerce_taxcloud_sales_tax_calculate($tax_rate, $line_item_wrapper) {
  watchdog('commerce_taxcloud', 'Calculation callback fired', array(), WATCHDOG_NOTICE);
  // By default, do not duplicate a tax that's already on the line item.
  if (!is_null($line_item_wrapper->commerce_unit_price->value()) &&
    !commerce_price_component_load($line_item_wrapper->commerce_unit_price->value(), $tax_rate['price_component'])) {
    // Lookup the tax rate for this line item.
    $tax_rate['rate'] = commerce_taxcloud_lookup($line_item_wrapper);
    // Calculate the tax amount.
    $amount = $line_item_wrapper->commerce_unit_price->amount->value() * $tax_rate['rate'];

    return array(
      'amount' => commerce_tax_rate_round_amount($tax_rate, $amount),
      'currency_code' => $line_item_wrapper->commerce_unit_price->currency_code->value(),
      'data' => array(
        'tax_rate' => $tax_rate,
      ),
    );
  }

  return FALSE;
}

/**
 * Lookup tax rate for a line item.
 *
 * @param object $line_item_wrapper
 *   An entity_metadata_wrapper() for the line item whose tax rate should be
 *   returned.
 *
 * @return string
 *   The tax rate for the specified line item.
 */
function commerce_taxcloud_lookup($line_item_wrapper) {
  // We're going to use a lot of caching, because there could potentially be
  // an exponentially metric ton of calls to this.
  //
  // @TODO Add a means of caching the total quantity of line items so that we
  // don't make an API call on every page load.
  //
  // So first, we're going to cache the API client.
  $client = &drupal_static(__FUNCTION__ . '_client');
  if (!isset($client)) {
    if (!class_exists('\TaxCloud\Client')) {
      libraries_load('php-taxcloud');
    }

    $client = new \TaxCloud\Client();
  }

  // Next, we're going to cache the order information. This way, only the first
  // call must contact TaxCloud and get the appropriate taxes. Subsequent calls
  // will just return the value from the cached array.
  $order_info = &drupal_static(__FUNCTION__ . '_order_' . $line_item_wrapper->order_id->value());
  if (!isset($order_info)) {
    $order_info['order_id'] = $line_item_wrapper->order_id->value();

    $order = commerce_order_load($order_info['order_id']);
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
    $order_info['customer_id'] = $order_wrapper->uid->value();

    $shipping_address = $order_wrapper->commerce_customer_shipping->value() ? $order_wrapper->commerce_customer_shipping->value() : $order_wrapper->commerce_customer_billing->value();
    $shipping_address_wrapper = entity_metadata_wrapper('commerce_customer_profile', $shipping_address);

    $zip = explode('-', $shipping_address_wrapper->commerce_customer_address->postal_code->value());
    if (isset($zip[1])) {
      $destination->setZip4($zip[1]);
    }
    else {
      $zip[1] = '';
    }

    $destination = new \TaxCloud\Address(
      $shipping_address_wrapper->commerce_customer_address->thoroughfare->value(),
      '',
      $shipping_address_wrapper->commerce_customer_address->locality->value(),
      $shipping_address_wrapper->commerce_customer_address->administrative_area->value(),
      $zip[0],
      $zip[1]
    );

    if ($shipping_address_wrapper->commerce_customer_address->premise->value()) {
      $destination->setAddress2($shipping_address_wrapper->commerce_customer_address->premise->value());
    }
    // Verify address.
    $VerifyAddress = new \TaxCloud\VerifyAddress(variable_get('commerce_taxcloud_usps_id'), $destination);
    $verified_address = $client->VerifyAddress($VerifyAddress);

    if ($verified_address->VerifyAddressResult->ErrNumber == 0) {
      $destination->setAddress1($verified_address->VerifyAddressResult->Address1);
      if (isset($verified_address->VerifyAddressResult->Address2)) {
        $destination->setAddress2($verified_address->VerifyAddressResult->Address2);
      }
      $destination->setCity($verified_address->VerifyAddressResult->City);
      $destination->setState($verified_address->VerifyAddressResult->State);
      $destination->setZip5($verified_address->VerifyAddressResult->Zip5);
      $destination->setZip4($verified_address->VerifyAddressResult->Zip4);
    }

    $order_info['destination'] = $destination;

    // Set origin address.
    $zip = explode('-', variable_get('commerce_taxcloud_zip'));
    $origin = new \TaxCloud\Address(
      variable_get('commerce_taxcloud_address1'),
      variable_get('commerce_taxcloud_address2'),
      variable_get('commerce_taxcloud_city'),
      variable_get('commerce_taxcloud_state'),
      $zip[0],
      $zip[1]
    );

    $order_info['origin'] = $origin;

    $order_info['cart_items'] = array();
    // Loop over line items to send to TaxCloud for tax calculation.
    foreach ($order_wrapper->commerce_line_items as $line_item) {
      $tic = (string) '00000';
      $cart_item = new \TaxCloud\CartItem(
        $line_item->line_item_id->value(),
        $line_item->line_item_label->value(),
        $tic,
        $line_item->commerce_unit_price->value(),
        $line_item->quantity->value()
      );
      $order_info['cart_items'][] = $cart_item;
    }

    $lookup = new \TaxCloud\Lookup(
      variable_get('commerce_taxcloud_api_id'),
      variable_get('commerce_taxcloud_api_key'),
      $order_info['customer_id'],
      $order_info['order_id'],
      $order_info['cart_items'],
      $order_info['origin'],
      $order_info['destination']
    );

    $lookup_response = $client->Lookup($lookup);
    $order_info['tax_amount']= $lookup_response[$order_info['order_id']];
  }

  return $order_info['tax_amount'][$line_item_wrapper->line_item_id->value()];
}

/**
 * Creates a required instance of a Taxability Information Code (TIC) field on
 * the specified bundle.
 *
 * @param string $field_name
 *   The name of the field; if it already exists, a new instance of the
 *   existing field will be created.
 * @param string $entity_type
 *   The type of entity the field instance will be attached to.
 * @param string $bundle
 *   The bundle name of the entity the field instance will be attached to.
 * @param string $label
 *   The label of the field instance.
 */
function commerce_taxcloud_create_instance($field_name, $field_type, $required, $entity_type, $bundle, $label, $description = NULL, $weight = 0) {
  // Add the specified TIC field to the entity bundle.
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);

  // If the field doesn't exist, create it.
  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => $field_type,
      'cardinality' => 1,
      'entity_types' => array($entity_type),
      'translatable' => FALSE,
      'locked' => FALSE,
    );
    if ($field_type == 'list_text') {
      $field['settings'] = array(
        'allowed_values_function' => 'commerce_taxcloud_tic_options',
      );
    }
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $label,
      'required' => $required,
      'settings' => array(),
      'display' => array(),
      'description' => $description,
      'default_value' => commerce_taxcloud_tic_default_value($entity_type, $bundle),
    );

    if ($field_type == 'list_text') {
      $instance['widget'] = array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(),
        'type' => 'options_select',
        'weight' => 0,
      );
    }

    $entity_info = entity_get_info($entity_type);
    $entity_info['view modes']['default'] = array();

    field_create_instance($instance);
  }
}

/**
 * Get Taxability Information Codes from TaxCloud.
 *
 * @return array
 *   Keyed by TIC.
 */
function commerce_taxcloud_get_tics() {
  $client = &drupal_static(__FUNCTION__ . '_client');
  if (!isset($client)) {
    if (!class_exists('\TaxCloud\Client')) {
      libraries_load('php-taxcloud');
    }

    $client = new \TaxCloud\Client();
  }

  $return = &drupal_static(__FUNCTION__);
  if (!isset($return)) {
    $return = $client->GetTICs(variable_get('commerce_taxcloud_api_id'), variable_get('commerce_taxcloud_api_key'));
  }

  return $return;
}

/**
 * Set options for Taxability Information Codes field.
 */
function commerce_taxcloud_tic_options() {
  $tics = commerce_taxcloud_get_tics();

  // TaxCloud's API currently does not return some TICs.
  $tics['00000'] = 'General';
  $tics['20070'] = 'School Supplies';
  $tics['20150'] = 'Disaster preparedness supplies';

  ksort($tics);

  return $tics;
}

/**
 * Ensure a Taxability Information Codes field is on a line item type bundle.
 */
function commerce_taxcloud_configure_line_item_type($type) {
  commerce_taxcloud_create_instance('commerce_taxcloud_tic', 'list_text', TRUE, 'commerce_line_item', $type, t('TIC'), t('Taxability Information Code'));
}
