<?php

/**
 * @file
 * Integrates Commerce Tax with TaxCloud API for calculating applicable
 * sales tax.
 */

/**
 * Implements hook_libraries_info().
 */
function commerce_taxcloud_libraries_info() {
  $libraries['php-taxcloud'] = array(
    'name' => 'PHP-TaxCloud',
    'vendor url' => 'https://github.com/VMdoh/php-taxcloud',
    'download url' => 'https://github.com/VMdoh/php-taxcloud/archive/master.tar.gz',
    'version' => 'dev',
    'files' => array(
      'php' => array(
        'lib/php-taxcloud.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_permission().
 */
function commerce_taxcloud_permission() {
  return array(
    'administer taxcloud settings' => array(
      'title' => t('Administer TaxCloud settings'),
      'description' => t('Access to edit TaxCloud account settings.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function commerce_taxcloud_menu() {
  $items['admin/commerce/config/taxes/taxcloud'] = array(
    'title' => 'TaxCloud',
    'description' => 'Configure API settings for communicating with TaxCloud.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_taxcloud_admin_form'),
    'access arguments' => array('administer taxcloud settings'),
    'file' => 'commerce_taxcloud.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  $items['admin/commerce/config/taxes/taxcloud/api'] = array(
    'title' => 'Credentials',
    'type' => MENU_DEFAULT_LOCAL_TASK,
  );

  $items['admin/commerce/config/taxes/taxcloud/line-items'] = array(
    'title' => 'Line Item TICs',
    'description' => 'Configure which tax codes apply to which line item types.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_taxcloud_admin_line_item_form'),
    'access arguments' => array('administer taxcloud settings'),
    'file' => 'commerce_taxcloud.admin.inc',
    'type' => MENU_LOCAL_TASK,
  );

  return $items;
}

/**
 * Implements hook_commerce_tax_type_info().
 */
function commerce_taxcloud_commerce_tax_type_info() {
  $tax_types = array();

  $tax_types['taxcloud_sales_tax'] = array(
    'title' => t('TaxCloud Sales Tax'),
    'display_title' => t('Sales tax'),
    'description' => t('Sales tax calculated via TaxCloud API'),
    'admin_list' => TRUE,
  );

  return $tax_types;
}

/**
 * Implements hook_commerce_tax_rate_info().
 */
function commerce_taxcloud_commerce_tax_rate_info() {
  $tax_rates = array();

  $tax_rates['taxcloud_sales_tax'] = array(
    'title' => t('TaxCloud Sales Tax'),
    'display_title' => t('Sales tax'),
    'description' => t('Calculate sales tax via TaxCloud API'),
    'type' => 'taxcloud_sales_tax',
    'rate' => 0,
    'admin_list' => TRUE,
    'calculation_callback' => 'commerce_taxcloud_sales_tax_calculate',
    'price_component' => 'taxcloud_sales_tax',
  );

  return $tax_rates;
}

/**
 * Get a TaxCloud client.
 *
 * @return \TaxCloud\Client
 *   Returns a Client instance for API operations.
 */
function commerce_taxcloud_client() {
  $client = &drupal_static(__FUNCTION__);
  if (!isset($client)) {
    if (!class_exists('\TaxCloud\Client')) {
      libraries_load('php-taxcloud');
    }

    $client = new \TaxCloud\Client();
  }

  return $client;
}

/**
 * Calculate applicable sales tax.
 *
 * @param array $tax_rate
 *   The tax rate array for the tax to calculate.
 * @param object $line_item_wrapper
 *   An entity_metadata_wrapper() for the line item whose unit price should be
 *   used in the tax calculation.
 *
 * @return array
 *   The tax price array or FALSE if the tax is already applied.
 */
function commerce_taxcloud_sales_tax_calculate($tax_rate, $line_item_wrapper) {
  // By default, do not duplicate a tax that's already on the line item.
  if (!is_null($line_item_wrapper->commerce_unit_price->value()) &&
    !commerce_price_component_load($line_item_wrapper->commerce_unit_price->value(), $tax_rate['price_component'])) {
    // Lookup the tax rate for this line item.
    $tax_rate['rate'] = commerce_taxcloud_lookup($line_item_wrapper);
    // Calculate the tax amount.
    $amount = $line_item_wrapper->commerce_unit_price->amount->value() * $tax_rate['rate'];

    return array(
      'amount' => commerce_tax_rate_round_amount($tax_rate, $amount),
      'currency_code' => $line_item_wrapper->commerce_unit_price->currency_code->value(),
      'data' => array(
        'tax_rate' => $tax_rate,
      ),
    );
  }

  return FALSE;
}

/**
 * Lookup tax rate for a line item.
 *
 * @param object $line_item_wrapper
 *   An entity_metadata_wrapper() for the line item whose tax rate should be
 *   returned.
 *
 * @return string
 *   The tax rate for the specified line item.
 */
function commerce_taxcloud_lookup($line_item_wrapper) {
  // We're going to use a lot of caching, because there could potentially be
  // an exponentially metric ton of calls to this.
  //
  // We're going to cache the order information. This way, only the first call
  // must contact TaxCloud and get the appropriate taxes. Subsequent calls will
  // just return the value from the cached array.
  $order_info = &drupal_static(__FUNCTION__ . '_order_' . $line_item_wrapper->order_id->value());
  if (!isset($order_info)) {
    $order_info['order_id'] = $line_item_wrapper->order_id->value();

    $order = commerce_order_load($order_info['order_id']);
    $order_wrapper = entity_metadata_wrapper('commerce_order', $order);

    $client = commerce_taxcloud_client();
    $order_info['customer_id'] = $order_wrapper->uid->value();

    $shipping_address = $order_wrapper->commerce_customer_shipping->value() ? $order_wrapper->commerce_customer_shipping->value() : $order_wrapper->commerce_customer_billing->value();
    $shipping_address_wrapper = entity_metadata_wrapper('commerce_customer_profile', $shipping_address);

    // Bail out if we don't have an address to use.
    if (!isset($shipping_address_wrapper->commerce_customer_address)) {
      return 0;
    }

    $zip = explode('-', $shipping_address_wrapper->commerce_customer_address->postal_code->value());
    $zip[1] = isset($zip[1]) ? $zip[1] : '';

    try {
      $destination = new \TaxCloud\Address(
        $shipping_address_wrapper->commerce_customer_address->thoroughfare->value(),
        '',
        $shipping_address_wrapper->commerce_customer_address->locality->value(),
        $shipping_address_wrapper->commerce_customer_address->administrative_area->value(),
        $zip[0],
        $zip[1]
      );

      if ($shipping_address_wrapper->commerce_customer_address->premise->value()) {
        $destination->setAddress2($shipping_address_wrapper->commerce_customer_address->premise->value());
      }
    }
    catch (Exception $e) {
      watchdog('commerce_taxcloud', $e->getMessage(), array(), WATCHDOG_ERROR);
    }

    // Verify address with USPS ID if set.
    $usps_id = variable_get('commerce_taxcloud_usps_id');
    if ($usps_id) {
      try {
        $verify_address = new \TaxCloud\Request\VerifyAddress($usps_id, $destination);
        $destination = $client->VerifyAddress($verify_address);
      }
      catch (Exception $e) {
        watchdog('commerce_taxcloud', $e->getMessage(), array(), WATCHDOG_ERROR);
      }
    }

    // Allow other modules to alter the destination address. For example, this
    // might be used if shipping to multiple locations where different tax
    // rules may apply, or overriding the destination for in-store pickup.
    $context = array(
      'line_item_wrapper' => clone $line_item_wrapper,
    );
    drupal_alter('commerce_taxcloud_destination', $destination, $context);

    if (!isset($destination)) {
      return 0;
    }
    $order_info['destination'] = $destination;

    // Set origin address.
    try {
      $zip = explode('-', variable_get('commerce_taxcloud_zip'));
      $origin = new \TaxCloud\Address(
        variable_get('commerce_taxcloud_address1'),
        variable_get('commerce_taxcloud_address2'),
        variable_get('commerce_taxcloud_city'),
        variable_get('commerce_taxcloud_state'),
        $zip[0],
        $zip[1]
      );
    }
    catch (Exception $e) {
      watchdog('commerce_taxcloud', $e->getMessage(), array(), WATCHDOG_ERROR);
    }

    // Allow other modules to alter the origin address. For example, this might
    // be used if selling from multiple locations where different tax rules may
    // apply, or for ensuring that the correct location is shown for accounting
    // purposes.
    $context = array(
      'line_item_wrapper' => clone $line_item_wrapper,
    );
    drupal_alter('commerce_taxcloud_origin', $origin, $context);

    if (!isset($origin)) {
      return 0;
    }
    $order_info['origin'] = $origin;

    $order_info['cart_items'] = array();
    // Loop over line items to send to TaxCloud for tax calculation.
    foreach ($order_wrapper->commerce_line_items as $line_item) {
      if (isset($line_item->commerce_taxcloud_tic)) {
        try {
          $cart_item = new \TaxCloud\CartItem(
            $line_item->line_item_id->value(),
            $line_item->line_item_label->value(),
            $line_item->commerce_taxcloud_tic->value(),
            $line_item->commerce_unit_price->value(),
            $line_item->quantity->value()
          );
          $order_info['cart_items'][] = $cart_item;
        }
        catch (Exception $e) {
          watchdog('commerce_taxcloud', $e->getMessage(), array(), WATCHDOG_ERROR);
        }
      }
    }

    // Bail out if there are no items to process.
    if (empty($order_info['cart_items'])) {
      return 0;
    }

    try {
      $lookup = new \TaxCloud\Request\Lookup(
        variable_get('commerce_taxcloud_api_id'),
        variable_get('commerce_taxcloud_api_key'),
        $order_info['customer_id'],
        $order_info['order_id'],
        $order_info['cart_items'],
        $order_info['origin'],
        $order_info['destination']
      );

      $lookup_response = $client->Lookup($lookup);
      $order_info['tax_amount'] = $lookup_response[$order_info['order_id']];
    }
    catch (Exception $e) {
      watchdog('commerce_taxcloud', $e->getMessage(), array(), WATCHDOG_ERROR);
    }
  }

  if (isset($order_info['tax_amount'][$line_item_wrapper->line_item_id->value()])) {
    return $order_info['tax_amount'][$line_item_wrapper->line_item_id->value()];
  }
  else {
    return 0;
  }
}

/**
 * Creates a required instance of a Taxability Information Code (TIC) field.
 *
 * @param string $field_name
 *   The name of the field; if it already exists, a new instance of the
 *   existing field will be created.
 * @param string $entity_type
 *   The type of entity the field instance will be attached to.
 * @param string $bundle
 *   The bundle name of the entity the field instance will be attached to.
 * @param string $label
 *   The label of the field instance.
 */
function commerce_taxcloud_create_instance($field_name, $field_type, $required, $entity_type, $bundle, $label, $default_value, $description = NULL, $weight = 0) {
  // Add the specified TIC field to the entity bundle.
  $field = field_info_field($field_name);
  $instance = field_info_instance($entity_type, $field_name, $bundle);

  // If the field doesn't exist, create it.
  if (empty($field)) {
    $field = array(
      'field_name' => $field_name,
      'type' => $field_type,
      'cardinality' => 1,
      'entity_types' => array($entity_type),
      'translatable' => FALSE,
      'locked' => FALSE,
    );
    if ($field_type == 'list_text') {
      $field['settings'] = array(
        'allowed_values_function' => 'commerce_taxcloud_tic_options',
      );
    }
    $field = field_create_field($field);
  }

  if (empty($instance)) {
    $instance = array(
      'field_name' => $field_name,
      'entity_type' => $entity_type,
      'bundle' => $bundle,
      'label' => $label,
      'required' => $required,
      'settings' => array(),
      'display' => array(),
      'description' => $description,
      'default_value' => array(array('value' => $default_value)),
    );

    if ($field_type == 'list_text') {
      $instance['widget'] = array(
        'active' => 1,
        'module' => 'options',
        'settings' => array(),
        'type' => 'options_select',
        'weight' => 0,
      );
    }

    $entity_info = entity_get_info($entity_type);
    $entity_info['view modes']['default'] = array();

    field_create_instance($instance);
  }
}

/**
 * Get Taxability Information Codes from TaxCloud.
 *
 * @return array
 *   Keyed by TIC.
 */
function commerce_taxcloud_get_tics() {
  $return = &drupal_static(__FUNCTION__);
  if (!isset($return)) {
    try {
      $client = commerce_taxcloud_client();
      $params = new \TaxCloud\Request\GetTICs(variable_get('commerce_taxcloud_api_id'), variable_get('commerce_taxcloud_api_key'));
      $return = $client->GetTICs($params);
    }
    catch (Exception $e) {
      drupal_set_message(check_plain($e->getMessage()), 'error');
      watchdog('commerce_taxcloud', $e->getMessage(), array(), WATCHDOG_ERROR);
      $return = array();
    }
  }

  return $return;
}

/**
 * Get Taxability Information Code Groups from TaxCloud.
 *
 * @return array
 *   Keyed by Group ID.
 */
function commerce_taxcloud_get_tic_groups() {
  $return = &drupal_static(__FUNCTION__);
  if (!isset($return)) {
    try {
      $client = commerce_taxcloud_client();
      $params = new \TaxCloud\Request\GetTICGroups(variable_get('commerce_taxcloud_api_id'), variable_get('commerce_taxcloud_api_key'));
      $return = $client->GetTICGroups($params);
    }
    catch (Exception $e) {
      drupal_set_message(check_plain($e->getMessage()), 'error');
      watchdog('commerce_taxcloud', $e->getMessage(), array(), WATCHDOG_ERROR);
      $return = array();
    }
  }

  return $return;
}

/**
 * Get Taxability Information Codes by Group.
 *
 * @return array
 *   Keyed by TIC
 */
function commerce_taxcloud_get_tics_by_group($group) {
  try {
    $client = commerce_taxcloud_client();
    $params = new \TaxCloud\Request\GetTICsByGroup(variable_get('commerce_taxcloud_api_id'), variable_get('commerce_taxcloud_api_key'), $group);
    $return = $client->GetTICsByGroup($params);
  }
  catch (Exception $e) {
    drupal_set_message(check_plain($e->getMessage()), 'error');
    watchdog('commerce_taxcloud', $e->getMessage(), array(), WATCHDOG_ERROR);
    $return = array();
  }

  return $return;
}

/**
 * Authorize a TaxCloud transaction.
 */
function commerce_taxcloud_authorize($order_wrapper) {
  $order_id = $order_wrapper->order_id->value();

  // We need the customer profile ID.
  $shipping_address = $order_wrapper->commerce_customer_shipping->value() ? $order_wrapper->commerce_customer_shipping->value() : $order_wrapper->commerce_customer_billing->value();
  $shipping_address_wrapper = entity_metadata_wrapper('commerce_customer_profile', $shipping_address);
  $customer_id = $shipping_address_wrapper->customer_profile_id->value();

  // Build a Cart Items array.
  $cart_items = array();
  foreach ($order_wrapper->commerce_line_items as $line_item) {
    if (isset($line_item->commerce_taxcloud_tic)) {
      $cart_item = new \TaxCloud\CartItem(
        $line_item->line_item_id->value(),
        $line_item->line_item_label->value(),
        $line_item->commerce_taxcloud_tic->value(),
        $line_item->commerce_unit_price->value(),
        $line_item->quantity->value()
      );
      $cart_items[] = $cart_item;
    }
  }

  try {
    $client = commerce_taxcloud_client();
    $params = new \TaxCloud\Request\Authorized(variable_get('commerce_taxcloud_api_id'), variable_get('commerce_taxcloud_api_key'), $customer_id, $order_id, $cart_items, $order_id, date("c"));
    $return = $client->Authorized($params);
  }
  catch (Exception $e) {
    drupal_set_message(t('An error occurred processing your transaction. Please contact the site administrator.'), 'error');
    watchdog('commerce_taxcloud', $e->getMessage(), array(), WATCHDOG_ERROR);
  }
}

/**
 * Capture a TaxCloud transaction.
 */
function commerce_taxcloud_capture($order_id) {
  try {
    $client = commerce_taxcloud_client();
    $params = new \TaxCloud\Request\Captured(variable_get('commerce_taxcloud_api_id'), variable_get('commerce_taxcloud_api_key'), $order_id);
    $return = $client->Captured($params);
  }
  catch (Exception $e) {
    drupal_set_message(check_plain($e->getMessage()), 'error');
    watchdog('commerce_taxcloud', $e->getMessage(), array(), WATCHDOG_ERROR);
  }
}

/**
 * Authorize and Capture a TaxCloud transaction simultaneously.
 */
function commerce_taxcloud_authorize_with_capture($order_wrapper) {
  $order_id = $order_wrapper->order_id->value();

  // We need the customer profile ID.
  $shipping_address = $order_wrapper->commerce_customer_shipping->value() ? $order_wrapper->commerce_customer_shipping->value() : $order_wrapper->commerce_customer_billing->value();
  $shipping_address_wrapper = entity_metadata_wrapper('commerce_customer_profile', $shipping_address);
  $customer_id = $shipping_address_wrapper->customer_profile_id->value();

  // Build a Cart Items array.
  $cart_items = array();
  foreach ($order_wrapper->commerce_line_items as $line_item) {
    if (isset($line_item->commerce_taxcloud_tic)) {
      $cart_item = new \TaxCloud\CartItem(
        $line_item->line_item_id->value(),
        $line_item->line_item_label->value(),
        $line_item->commerce_taxcloud_tic->value(),
        $line_item->commerce_unit_price->value(),
        $line_item->quantity->value()
      );
      $cart_items[] = $cart_item;
    }
  }

  try {
    $client = commerce_taxcloud_client();
    $params = new \TaxCloud\Request\AuthorizedWithCapture(variable_get('commerce_taxcloud_api_id'), variable_get('commerce_taxcloud_api_key'), $customer_id, $order_id, $cart_items, $order_id, date("c"), date("c"));
    $return = $client->Authorized($params);
  }
  catch (Exception $e) {
    drupal_set_message(t('An error occurred processing your transaction. Please contact the site administrator.'), 'error');
    watchdog('commerce_taxcloud', $e->getMessage(), array(), WATCHDOG_ERROR);
  }
}

/**
 * Process returned items.
 *
 * @param array $line_items
 *   An array of line item wrappers for line items being returned.
 *   Note: Line items do not necessarily need to be from the same order.
 */
function commerce_taxcloud_returned($line_items) {
  $returns = array();

  foreach ($line_items as $line_item) {
    $order_id = $line_item->order->order_id->value();

    $cart_item = new \TaxCloud\CartItem(
      $line_item->line_item_id->value(),
      $line_item->line_item_label->value(),
      $line_item->commerce_taxcloud_tic->value(),
      $line_item->commerce_unit_price->value(),
      $line_item->quantity->value()
    );
    $returns[$order_id][] = $cart_item;
  }

  foreach ($returns as $order_id => $cart_items) {
    try {
      $client = commerce_taxcloud_client();
      $params = new \TaxCloud\Request\Returned(variable_get('commerce_taxcloud_api_id'), variable_get('commerce_taxcloud_api_key'), $order_id, $cart_items, date("c"));
      $return = $client->Returned($params);
    }
    catch (Exception $e) {
      drupal_set_message(t('An error occurred processing your transaction. Please contact the site administrator.'), 'error');
      watchdog('commerce_taxcloud', $e->getMessage(), array(), WATCHDOG_ERROR);
    }
  }
}

/**
 * Set options for Taxability Information Codes field.
 */
function commerce_taxcloud_tic_options() {
  $options = &drupal_static(__FUNCTION__);
  if (!isset($options)) {
    $options = array();
    $options['00000'] = 'General Goods and Services (TIC: 00000)';

    $groups = commerce_taxcloud_get_tic_groups();
    foreach ($groups as $gid => $group) {
      $tics = commerce_taxcloud_get_tics_by_group($gid);

      // Let's make the TIC part of the label.
      foreach ($tics as $tic => $label) {
        $tics[$tic] = $label . ' (TIC: ' . $tic . ')';
      }

      ksort($tics);
      $options[$group] = $tics;
    }
  }

  return $options;
}

/**
 * Get default value for Taxability Information Codes field.
 */
function commerce_taxcloud_tic_options_default($type) {
  $instance[$type] = field_info_instance('commerce_line_item', 'commerce_taxcloud_tic', $type);

  if (empty($instance[$type])) {
    $tics = commerce_taxcloud_tic_options();
    $return = array_slice($tics, 0, 1, TRUE);
  }
  else {
    $return = $instance[$type]['default_value'][0]['value'];
  }

  return $return;
}

/**
 * Ensure a Taxability Information Codes field is on a line item type bundle.
 */
function commerce_taxcloud_configure_line_item_type($type, $tic) {
  commerce_taxcloud_create_instance('commerce_taxcloud_tic', 'list_text', TRUE, 'commerce_line_item', $type, t('TIC'), $tic, t('Taxability Information Code'));
}

/**
 * Initialize Taxability Information Code field on existing line items.
 */
function commerce_taxcloud_tic_init($type, $tic) {
  $line_items = commerce_line_item_load_multiple(array(), array('type' => $type));
  foreach ($line_items as $line_item) {
    $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);
    $line_item_wrapper->commerce_taxcloud_tic = $tic;
    $line_item_wrapper->save();
  }
}
